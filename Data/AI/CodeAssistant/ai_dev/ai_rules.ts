// Generated by Code Assistant Testing Ground
export const aiRules = {
  "active": true,
  "instructions": "While this is active, along with any of the following rules, Code Assistant must obey when generating code.",
  "version": 1.3,
  "categories": [
    {
      "category": "Response Indicators",
      "rules": [
        {
          "title": "Response Prefix Indicators",
          "active": true,
          "rule": "The AI must prefix its responses with specific markers depending on its actions: [Y] if it has read and is following the rules, [!] if it has added to a log file, and [+] if it has split a log file due to exceeding the max_lines limit.",
          "exceptions": [],
          "reason": "Allows the user to quickly verify the AI’s compliance and when logs or splits have been updated."
        }
      ]
    },
    {
      "category": "Versioning & Logs",
      "rules": [
        {
          "title": "Update Logs",
          "active": true,
          "rule": "Upon each generation, the AI must analyse the contents of the latest log.ts file in ai_dev/log/update_log/ and update this file with a new entry which includes the current version, a brief description of the edits made, and the original prompt given by the user. If the file becomes large, the AI must create a new file (e.g., update2.ts) and continue appending."
        },
        {
          "title": "Layout Consistency",
          "active": true,
          "rule": "Due to inconsistency with designing the app layout, and AI constantly messing up layouts after perfecting them already, upon each generation, the AI must analyse the contents of the latest layout.ts file in ai_dev/log/layout/ and update this file to explain how the layout should look. If the file becomes large, separate the file by section (eg: layout_canvas.ts).",
          "exceptions": [
            "The user doesn’t specifically state how the layout or a component of the layout should look"
          ]
        },
        {
          "title": "Checkpoint Logging",
          "active": true,
          "rule": "Whenever the user signals a checkpoint, the AI must log the current state in ai_dev/log/checkpoints/checkpoint.ts, including the version and the recent changes made."
        },
        {
          "title": "Max Lines Across Logs",
          "active": true,
          "rule": "Any file inside ai_dev/log/ must be split if it exceeds ${'max_lines'} lines to prevent oversized log files.",
          "variables": {
            "max_lines": 1000
          }
        },
        {
          "title": "Increment Version on Change",
          "active": true,
          "rule": "Whenever the AI modifies 'ai_rules.ts' or 'ai_commands.ts', it must increment the respective 'version' number in that file to reflect the change."
        }
      ]
    },
    {
      "category": "Task Management",
      "rules": [
        {
          "title": "Track Unfinished Tasks",
          "active": true,
          "rule": "If a task is not fully completed in the current generation, the AI must add it to ai_dev/todo.ts within the 'tasks' array along with the original instructions. Once a task is completed, it is moved to the 'completedTasks' array. Tasks can only be removed from 'completedTasks' if explicitly instructed by the user.",
          "exceptions": []
        }
      ]
    },
    {
      "category": "Code Modification Safeguards",
      "rules": [
        {
          "title": "Preserve Placeholders",
          "active": true,
          "rule": "Never remove components or logic that are potentially placeholders without being instructed to. You may only ask to remove them and await validation. When creating a new placeholder, you must add a comment explaining its intentions.",
          "reason": "To prevent accidental removal of work-in-progress or example components that are essential for testing or future development."
        }
      ]
    },
    {
      "category": "Code Structure & Quality",
      "rules": [
        {
          "title": "Promote Reusability",
          "active": true,
          "rule": "Always consider reusability when creating scripts. Anything that is reusable should be categorized within a folder labelled 'modules' and then further categorized into subfolders based on its functionality (e.g., 'modules/utils', 'modules/hooks', 'modules/components').",
          "reason": "Encourages a modular and maintainable codebase by separating reusable logic from single-purpose scripts."
        },
        {
          "title": "Prohibit JSON Imports",
          "active": true,
          "rule": "Never import functions, variables, or any other constructs from JSON files. JSON files are for static data storage and should only be read or parsed at runtime, not imported directly into modules.",
          "reason": "Importing from JSON is not a standard practice and indicates a misunderstanding of how modules and data files should be used. It can lead to unexpected behavior and build failures."
        }
      ]
    },
    {
      "category": "File Headers",
      "rules": [
        {
          "title": "Include File Path",
          "active": true,
          "rule": "At the very top of every generated script, include a comment with the directory and filename in the format: // <directory>/<filename>."
        }
      ]
    },
    {
      "category": "Dependencies",
      "rules": [
        {
          "title": "Dependency Logging",
          "active": true,
          "rule": "Whenever a dependency is introduced, removed, or replaced, the AI must log it in ai_dev/log/Dependencies/dependencies.ts. Each entry must include: package name, exact installation command, and a note explaining where and why it is used."
        }
      ]
    }
  ]
};